/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface DappInnInterface extends ethers.utils.Interface {
  functions: {
    "balance()": FunctionFragment;
    "checkIn(uint8,uint8)": FunctionFragment;
    "checkOut(uint8)": FunctionFragment;
    "getTimeStamp()": FunctionFragment;
    "numberOfRooms()": FunctionFragment;
    "owner()": FunctionFragment;
    "roomPriceInWei()": FunctionFragment;
    "rooms(uint8)": FunctionFragment;
    "setNumberOfRooms(uint8)": FunctionFragment;
    "setRoomPrice(uint256)": FunctionFragment;
    "withdrawAll()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "balance", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "checkIn",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkOut",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimeStamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfRooms",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "roomPriceInWei",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rooms", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "setNumberOfRooms",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoomPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "balance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "checkIn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "checkOut", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTimeStamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfRooms",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "roomPriceInWei",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rooms", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setNumberOfRooms",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoomPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;

  events: {};
}

export class DappInn extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DappInnInterface;

  functions: {
    balance(overrides?: CallOverrides): Promise<[BigNumber]>;

    checkIn(
      _roomNumber: BigNumberish,
      _timeToStay: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkOut(
      _roomNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getTimeStamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    numberOfRooms(overrides?: CallOverrides): Promise<[number]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    roomPriceInWei(overrides?: CallOverrides): Promise<[BigNumber]>;

    rooms(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, string, BigNumber] & {
        status: number;
        guest: string;
        checkoutDate: BigNumber;
      }
    >;

    setNumberOfRooms(
      _numberOfRooms: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRoomPrice(
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  balance(overrides?: CallOverrides): Promise<BigNumber>;

  checkIn(
    _roomNumber: BigNumberish,
    _timeToStay: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkOut(
    _roomNumber: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getTimeStamp(overrides?: CallOverrides): Promise<BigNumber>;

  numberOfRooms(overrides?: CallOverrides): Promise<number>;

  owner(overrides?: CallOverrides): Promise<string>;

  roomPriceInWei(overrides?: CallOverrides): Promise<BigNumber>;

  rooms(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, string, BigNumber] & {
      status: number;
      guest: string;
      checkoutDate: BigNumber;
    }
  >;

  setNumberOfRooms(
    _numberOfRooms: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRoomPrice(
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAll(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    balance(overrides?: CallOverrides): Promise<BigNumber>;

    checkIn(
      _roomNumber: BigNumberish,
      _timeToStay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    checkOut(
      _roomNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getTimeStamp(overrides?: CallOverrides): Promise<BigNumber>;

    numberOfRooms(overrides?: CallOverrides): Promise<number>;

    owner(overrides?: CallOverrides): Promise<string>;

    roomPriceInWei(overrides?: CallOverrides): Promise<BigNumber>;

    rooms(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, string, BigNumber] & {
        status: number;
        guest: string;
        checkoutDate: BigNumber;
      }
    >;

    setNumberOfRooms(
      _numberOfRooms: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRoomPrice(
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAll(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    balance(overrides?: CallOverrides): Promise<BigNumber>;

    checkIn(
      _roomNumber: BigNumberish,
      _timeToStay: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkOut(
      _roomNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getTimeStamp(overrides?: CallOverrides): Promise<BigNumber>;

    numberOfRooms(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    roomPriceInWei(overrides?: CallOverrides): Promise<BigNumber>;

    rooms(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    setNumberOfRooms(
      _numberOfRooms: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRoomPrice(
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkIn(
      _roomNumber: BigNumberish,
      _timeToStay: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkOut(
      _roomNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getTimeStamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numberOfRooms(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    roomPriceInWei(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rooms(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setNumberOfRooms(
      _numberOfRooms: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRoomPrice(
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
