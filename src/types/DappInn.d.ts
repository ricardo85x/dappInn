/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface DappInnInterface extends ethers.utils.Interface {
  functions: {
    "addRoomService(string,uint256)": FunctionFragment;
    "balance()": FunctionFragment;
    "buyRoomService(uint8,uint8)": FunctionFragment;
    "checkIn(uint8,uint256)": FunctionFragment;
    "checkOut(uint8)": FunctionFragment;
    "defaultRoomPriceInWei()": FunctionFragment;
    "getRoomTab(uint8)": FunctionFragment;
    "getTimeStamp()": FunctionFragment;
    "numberOfRooms()": FunctionFragment;
    "numberOfServices()": FunctionFragment;
    "owner()": FunctionFragment;
    "roomService(uint8)": FunctionFragment;
    "rooms(uint8)": FunctionFragment;
    "setDefaultRoomPrice(uint256)": FunctionFragment;
    "setNumberOfRooms(uint8)": FunctionFragment;
    "setRoomPrice(uint8,uint256)": FunctionFragment;
    "updateRoomService(uint8,string,uint256,bool)": FunctionFragment;
    "withdrawAll()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addRoomService",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balance", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "buyRoomService",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkIn",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkOut",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultRoomPriceInWei",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoomTab",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimeStamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfRooms",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfServices",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "roomService",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "rooms", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "setDefaultRoomPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNumberOfRooms",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoomPrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRoomService",
    values: [BigNumberish, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addRoomService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyRoomService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "checkIn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "checkOut", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "defaultRoomPriceInWei",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRoomTab", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTimeStamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfRooms",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfServices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "roomService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rooms", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultRoomPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNumberOfRooms",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoomPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRoomService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;

  events: {
    "addRoomServiceEvent(uint8,string)": EventFragment;
    "buyRoomServiceEvent(address,string)": EventFragment;
    "checkInEvent(address,uint8)": EventFragment;
    "checkOutEvent(address,uint8)": EventFragment;
    "setDefaultRoomPriceEvent(uint256)": EventFragment;
    "setNumberOfRoomsEvent(uint8)": EventFragment;
    "setRoomPriceEvent(uint8,uint256)": EventFragment;
    "updateRoomServiceEvent(uint8,string)": EventFragment;
    "withdrawAllEvent(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "addRoomServiceEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "buyRoomServiceEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "checkInEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "checkOutEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "setDefaultRoomPriceEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "setNumberOfRoomsEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "setRoomPriceEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "updateRoomServiceEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "withdrawAllEvent"): EventFragment;
}

export class DappInn extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DappInnInterface;

  functions: {
    addRoomService(
      _name: string,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balance(overrides?: CallOverrides): Promise<[BigNumber]>;

    buyRoomService(
      _roomNumber: BigNumberish,
      _serviceNumber: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkIn(
      _roomNumber: BigNumberish,
      _timeToStay: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkOut(
      _roomNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    defaultRoomPriceInWei(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRoomTab(
      _roomNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, BigNumber, boolean] & {
          name: string;
          price: BigNumber;
          enabled: boolean;
        })[]
      ]
    >;

    getTimeStamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    numberOfRooms(overrides?: CallOverrides): Promise<[number]>;

    numberOfServices(overrides?: CallOverrides): Promise<[number]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    roomService(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean] & {
        name: string;
        price: BigNumber;
        enabled: boolean;
      }
    >;

    rooms(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, string, BigNumber, BigNumber] & {
        status: number;
        guest: string;
        checkoutDate: BigNumber;
        price: BigNumber;
      }
    >;

    setDefaultRoomPrice(
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNumberOfRooms(
      _numberOfRooms: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRoomPrice(
      _roomNumber: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateRoomService(
      _serviceNumber: BigNumberish,
      _name: string,
      _price: BigNumberish,
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addRoomService(
    _name: string,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balance(overrides?: CallOverrides): Promise<BigNumber>;

  buyRoomService(
    _roomNumber: BigNumberish,
    _serviceNumber: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkIn(
    _roomNumber: BigNumberish,
    _timeToStay: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkOut(
    _roomNumber: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  defaultRoomPriceInWei(overrides?: CallOverrides): Promise<BigNumber>;

  getRoomTab(
    _roomNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber, boolean] & {
      name: string;
      price: BigNumber;
      enabled: boolean;
    })[]
  >;

  getTimeStamp(overrides?: CallOverrides): Promise<BigNumber>;

  numberOfRooms(overrides?: CallOverrides): Promise<number>;

  numberOfServices(overrides?: CallOverrides): Promise<number>;

  owner(overrides?: CallOverrides): Promise<string>;

  roomService(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, boolean] & {
      name: string;
      price: BigNumber;
      enabled: boolean;
    }
  >;

  rooms(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, string, BigNumber, BigNumber] & {
      status: number;
      guest: string;
      checkoutDate: BigNumber;
      price: BigNumber;
    }
  >;

  setDefaultRoomPrice(
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNumberOfRooms(
    _numberOfRooms: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRoomPrice(
    _roomNumber: BigNumberish,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateRoomService(
    _serviceNumber: BigNumberish,
    _name: string,
    _price: BigNumberish,
    _enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAll(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addRoomService(
      _name: string,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balance(overrides?: CallOverrides): Promise<BigNumber>;

    buyRoomService(
      _roomNumber: BigNumberish,
      _serviceNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    checkIn(
      _roomNumber: BigNumberish,
      _timeToStay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    checkOut(
      _roomNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    defaultRoomPriceInWei(overrides?: CallOverrides): Promise<BigNumber>;

    getRoomTab(
      _roomNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, boolean] & {
        name: string;
        price: BigNumber;
        enabled: boolean;
      })[]
    >;

    getTimeStamp(overrides?: CallOverrides): Promise<BigNumber>;

    numberOfRooms(overrides?: CallOverrides): Promise<number>;

    numberOfServices(overrides?: CallOverrides): Promise<number>;

    owner(overrides?: CallOverrides): Promise<string>;

    roomService(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean] & {
        name: string;
        price: BigNumber;
        enabled: boolean;
      }
    >;

    rooms(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, string, BigNumber, BigNumber] & {
        status: number;
        guest: string;
        checkoutDate: BigNumber;
        price: BigNumber;
      }
    >;

    setDefaultRoomPrice(
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setNumberOfRooms(
      _numberOfRooms: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRoomPrice(
      _roomNumber: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRoomService(
      _serviceNumber: BigNumberish,
      _name: string,
      _price: BigNumberish,
      _enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAll(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    addRoomServiceEvent(
      _serviceNumber?: null,
      _name?: null
    ): TypedEventFilter<
      [number, string],
      { _serviceNumber: number; _name: string }
    >;

    buyRoomServiceEvent(
      _address?: string | null,
      _service?: null
    ): TypedEventFilter<
      [string, string],
      { _address: string; _service: string }
    >;

    checkInEvent(
      _address?: string | null,
      _roomNumber?: null
    ): TypedEventFilter<
      [string, number],
      { _address: string; _roomNumber: number }
    >;

    checkOutEvent(
      _address?: string | null,
      _roomNumber?: null
    ): TypedEventFilter<
      [string, number],
      { _address: string; _roomNumber: number }
    >;

    setDefaultRoomPriceEvent(
      _price?: null
    ): TypedEventFilter<[BigNumber], { _price: BigNumber }>;

    setNumberOfRoomsEvent(
      _numberOfRooms?: null
    ): TypedEventFilter<[number], { _numberOfRooms: number }>;

    setRoomPriceEvent(
      _roomNumber?: null,
      _price?: null
    ): TypedEventFilter<
      [number, BigNumber],
      { _roomNumber: number; _price: BigNumber }
    >;

    updateRoomServiceEvent(
      _serviceNumber?: null,
      _name?: null
    ): TypedEventFilter<
      [number, string],
      { _serviceNumber: number; _name: string }
    >;

    withdrawAllEvent(
      _amount?: null
    ): TypedEventFilter<[BigNumber], { _amount: BigNumber }>;
  };

  estimateGas: {
    addRoomService(
      _name: string,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balance(overrides?: CallOverrides): Promise<BigNumber>;

    buyRoomService(
      _roomNumber: BigNumberish,
      _serviceNumber: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkIn(
      _roomNumber: BigNumberish,
      _timeToStay: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkOut(
      _roomNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    defaultRoomPriceInWei(overrides?: CallOverrides): Promise<BigNumber>;

    getRoomTab(
      _roomNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimeStamp(overrides?: CallOverrides): Promise<BigNumber>;

    numberOfRooms(overrides?: CallOverrides): Promise<BigNumber>;

    numberOfServices(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    roomService(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rooms(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    setDefaultRoomPrice(
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNumberOfRooms(
      _numberOfRooms: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRoomPrice(
      _roomNumber: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateRoomService(
      _serviceNumber: BigNumberish,
      _name: string,
      _price: BigNumberish,
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addRoomService(
      _name: string,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyRoomService(
      _roomNumber: BigNumberish,
      _serviceNumber: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkIn(
      _roomNumber: BigNumberish,
      _timeToStay: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkOut(
      _roomNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    defaultRoomPriceInWei(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoomTab(
      _roomNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTimeStamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numberOfRooms(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numberOfServices(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    roomService(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rooms(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setDefaultRoomPrice(
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNumberOfRooms(
      _numberOfRooms: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRoomPrice(
      _roomNumber: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateRoomService(
      _serviceNumber: BigNumberish,
      _name: string,
      _price: BigNumberish,
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
